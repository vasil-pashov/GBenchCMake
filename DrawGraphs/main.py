from collections import OrderedDict
import json
import os
import argparse
import glob
import datetime
import jinja2
import pathlib
from plot import makePlotColumnDesc, Plot, PlotDescription, PlotRowException

def dirPath(string):
	"""Used by argparse for directory type
	:param string: String which will be examined
	"""
	if os.path.isdir(string):
		return string
	else:
		raise NotADirectoryError(string)

def setupArgparse():
	"""Set up command line arguments and parse them
	:returns: Parsed command line arguments
	"""
	parser=argparse.ArgumentParser()
	parser.add_argument('src_dir', type=dirPath, help='Directory containing perfs to be ploted.')
	parser.add_argument('dest_file', help='Destination where to put the plots from src_dir')
	return parser.parse_args()

def makeOptions(title: str, unit: str) -> dict:
	"""Create default options for a plot
	:param title: The title which will be shown in the UI
	:param unit: The unit along the y-axis.
	:returns: Dict with google chart compatible options ready to be dumped as json
	"""
	options={}
	options['title']=title
	options['legend']={'position': 'top'}
	options['curveType']='function'
	hAxis={
		'format': 'yyyy-M-dd',
		'gridlines': {'count': 0},
		'title': 'Date'
	}
	vAxis={
		'title': "Time ({})".format(unit),
		'minValue': 0
	}
	options['hAxis']=hAxis
	options['vAxis']=vAxis
	return options


def gatherPlotData(dir):
	"""Read all json files generated by run_tests.py and create plot class for each
	"""
	descList=[
		makePlotColumnDesc("date", label="Date", type="date"),
		makePlotColumnDesc("real_time", label="Real Time", type="number")
	]	
	plotDesc=PlotDescription("date", descList)
	allPlots={}
	additionalPlotInfo={}
	pattern=os.path.join(dir, "*.json")
	fileNameList=glob.glob(pattern)
	for fileName in fileNameList:
		with open(fileName, "r") as file:
			jsonData=json.load(file)
			date=datetime.datetime.strptime(jsonData['info']['date'], "%Y/%m/%d %H:%M:%S")
			for benchmarkTask in jsonData['benchmark_list']:
				benchmarks=benchmarkTask['benchmarks']
				for benchmark in benchmarks:
					agregate=benchmark.get('aggregate_name', None)
					if agregate and agregate != "mean": 
						continue
					name=benchmark['name']
					realTime=benchmark['real_time']
					unit=benchmark['time_unit']
					row={'date': date, 'real_time': realTime}
					if name not in  allPlots:
						plot=Plot(plotDesc)
						plot.addRow(row)
						allPlots[name]=plot
						plot.options=makeOptions(name, unit)
						additionalPlotInfo[name]=(realTime, unit)
					else:
						if unit != additionalPlotInfo[name][1]:
							raise PlotRowException(
								"Inconsistend row units. Expecting %s got %s" % (
									unit, additionalPlotInfo[name][1]))
						plot=allPlots[name]
						plot.addRow(row)
						additionalPlotInfo[name][0]=max(additionalPlotInfo[name][0], realTime)
	for (plotName, (maxVal, unit)) in additionalPlotInfo.items():
		if unit=="ms" and maxVal > 1000:
			for row in allPlots[plotName].rows:
				row['real_time'] /= 1000
			allPlots[plotName].options['vAxis']['title'] = "Time (sec)"
	return allPlots

def drawPlots(plots, dest):
	templateLoader=jinja2.FileSystemLoader(
		os.path.join(
			pathlib.Path(__file__).parent.absolute(),
			"./templates"
		)
	)
	environment=jinja2.Environment(loader=templateLoader)
	template=environment.get_template("plot.html")
	renderResult=template.render(plots=plots)
	with open(dest, "w") as destFile:
		destFile.write(renderResult)

def main():
	args=setupArgparse()
	plots=gatherPlotData(args.src_dir)
	drawPlots(plots, args.dest_file)


if __name__ == '__main__':
	main()
